1. Install Python
2. install virtualenv
pip install virtualenv

pip - pip is a package-management system written in Python used to install and manage software packages. It connects to an online repository of public packages, called the Python Package Index

VirtualEnv - Think of it like this: for each Django project you start, you will first create a Virtual Environment for it. It’s like having a sandbox for each Django project. So you can play around, install packages, uninstall packages without breaking anything.

3. Create New Project
4. Create virtual environment in the project
virtualenv venv

5. venv\Scripts\activate.bat - to activate virtualenv in the project
if we need to deactivate the venv then
venv\Scripts\deactivate.bat

6. pip install django
7. django-admin startproject myproject



manage.py: a shortcut to use the django-admin command-line utility. It’s used to run management commands related to our project. We will use it to run the development server, run tests, create migrations and much more.

__init__.py: this empty file tells Python that this folder is a Python package.

settings.py: this file contains all the project’s configuration. We will refer to this file all the time!

urls.py: this file is responsible for mapping the routes and paths in our project. For example, if you want to show something in the URL /about/, you have to map it here first.

wsgi.py: this file is a simple gateway interface used for deployment. You don’t have to bother about it. Just let it be for now.


8. django-admin startapp boards


    migrations/: here Django store some files to keep track of the changes you create in the models.py file, so to keep the database and the models.py synchronized.
    admin.py: this is a configuration file for a built-in Django app called Django Admin.
    apps.py: this is a configuration file of the app itself.
    models.py: here is where we define the entities of our Web application. The models are translated automatically by Django into database tables.
    tests.py: this file is used to write unit tests for the app.
    views.py: this is the file where we handle the request/response cycle of our Web application.

Now that we created our first app, let’s configure our project to use it.

To do that, open the settings.py and try to find the INSTALLED_APPS variable:


10. views.py
from django.http import HttpResponse

def home(request):
    return HttpResponse('Hello, World!')

from django.conf.urls import url
from django.contrib import admin

from boards import views

11.urls.py
urlpatterns = [
    url(r'^$', views.home, name='home'),
    url(r'^admin/', admin.site.urls),
]


12. python manage.py runserver to run python server